#include<iostream>
using namespace std;
#include <cstdint>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>

#include "cuda_runtime.h"

#define BLOCK_X 16
#define BLOCK_Y 16

#define TILE_X 64
#define TILE_X_4 16
#define TILE_Y 128
#define TILE_Y_4 32

#define TILE_K 8

#define WPTN 8
#define WPTM 8
#define WPTN_4  2

__global__ __launch_bounds__(128, 4) void sgemm_128x128x8(int M, int N, int K,
	const float* __restrict__ A,
	const float* __restrict__ B,
	float* __restrict__ C)
{
	__shared__ float4 smem_a[2][TILE_K * TILE_Y_4];
	__shared__ float4 smem_b[2][TILE_K * TILE_X_4];

	int tx = threadIdx.x % 16;
	int ty = threadIdx.x / 16;

	//     int tx4 = threadIdx.x % 4;
	//     int ty4 = threadIdx.x / 4;

	int tx2 = threadIdx.x % 2;
	int ty2 = threadIdx.x / 2;

	//     int tx32 = threadIdx.x % 32;
	//     int ty32 = threadIdx.x / 32;

	const float* pA = (A + K * TILE_Y * blockIdx.y + ty2 * K + tx2 * 4);
	const float* pB = (B + TILE_X * blockIdx.x + ty * N + tx * 4);
	float4* pC = (float4*)C + TILE_Y * blockIdx.y * N / 4 + TILE_X_4 * blockIdx.x;

	int sts_a_offset = tx2 * 4 * TILE_Y + ty2;
	int sts_b_offset = ty * TILE_X_4 + tx;

	float4 f4_zero = make_float4(0.f, 0.f, 0.f, 0.f);
	bool valid_ld_a_0 = ((blockIdx.y * TILE_Y + ty2) < M) && ((tx2 * 4) < K);
	bool valid_ld_a_1 = ((blockIdx.y * TILE_Y + ty2 + 64) < M) && ((tx2 * 4) < K);
	bool valid_ld_b_0 = ((blockIdx.x * TILE_X + tx * 4) < N) && (ty < K);

	float4 ldg_a_reg[2];
	float4 ldg_b_reg[2];

	ldg_a_reg[0] = valid_ld_a_0 ? *(const float4*)pA : f4_zero;
	ldg_a_reg[1] = valid_ld_a_1 ? *(const float4*)(pA + 64 * K) : f4_zero;
	ldg_b_reg[0] = valid_ld_b_0 ? *(const float4*)(pB + 0 * N) : f4_zero;

	float4 c[WPTM][WPTN_4] = { { f4_zero } };

	*((float*)&smem_a[0][0] + sts_a_offset + 0 * TILE_Y + 0) = ldg_a_reg[0].x;
	*((float*)&smem_a[0][0] + sts_a_offset + 1 * TILE_Y + 0) = ldg_a_reg[0].y;
	*((float*)&smem_a[0][0] + sts_a_offset + 2 * TILE_Y + 0) = ldg_a_reg[0].z;
	*((float*)&smem_a[0][0] + sts_a_offset + 3 * TILE_Y + 0) = ldg_a_reg[0].w;
	*((float*)&smem_a[0][0] + sts_a_offset + 0 * TILE_Y + 64) = ldg_a_reg[1].x;
	*((float*)&smem_a[0][0] + sts_a_offset + 1 * TILE_Y + 64) = ldg_a_reg[1].y;
	*((float*)&smem_a[0][0] + sts_a_offset + 2 * TILE_Y + 64) = ldg_a_reg[1].z;
	*((float*)&smem_a[0][0] + sts_a_offset + 3 * TILE_Y + 64) = ldg_a_reg[1].w;

	smem_b[0][sts_b_offset + 0] = ldg_b_reg[0];

	__syncthreads();


	int i = 0;
	int write_stage_idx = 1;

	float4 reg_a[2][2];
	float4 reg_b[2][2];

	reg_a[0][0] = smem_a[0][0 + (threadIdx.x / 8)];
	reg_a[0][1] = smem_a[0][16 + (threadIdx.x / 8)];
	reg_b[0][0] = smem_b[0][0 + (threadIdx.x % 8)];
	reg_b[0][1] = smem_b[0][8 + (threadIdx.x % 8)];


	do
	{
		i += 8;
		valid_ld_a_0 = (valid_ld_a_0 && ((tx2 * 4 + i) < K));
		valid_ld_a_1 = (valid_ld_a_1 && ((tx2 * 4 + i) < K));
		valid_ld_b_0 = (valid_ld_b_0 && ((ty + i) < K));

		ldg_a_reg[0] = (valid_ld_a_0) ? *(const float4*)(pA + i + 0) : f4_zero;
		ldg_a_reg[1] = (valid_ld_a_1) ? *(const float4*)(pA + i + 64 * K) : f4_zero;
		ldg_b_reg[0] = (valid_ld_b_0) ? *(const float4*)(pB + (i + 0) * N) : f4_zero;

		int load_stage_idx = write_stage_idx ^ 1;

#pragma unroll
		for (int j = 0; j < TILE_K - 1; j++)
		{
			reg_a[(j + 1) % 2][0] = smem_a[load_stage_idx][(j + 1) *  TILE_Y_4 + 0 + (threadIdx.x / 8)];
			reg_a[(j + 1) % 2][1] = smem_a[load_stage_idx][(j + 1) *  TILE_Y_4 + 16 + (threadIdx.x / 8)];
			reg_b[(j + 1) % 2][0] = smem_b[load_stage_idx][(j + 1) *  TILE_X_4 + 0 + (threadIdx.x % 8)];
			reg_b[(j + 1) % 2][1] = smem_b[load_stage_idx][(j + 1) *  TILE_X_4 + 8 + (threadIdx.x % 8)];

			c[0][0].x += reg_a[j % 2][0].x * reg_b[j % 2][0].x;
			c[0][0].y += reg_a[j % 2][0].x * reg_b[j % 2][0].y;
			c[0][0].z += reg_a[j % 2][0].x * reg_b[j % 2][0].z;
			c[0][0].w += reg_a[j % 2][0].x * reg_b[j % 2][0].w;
			c[0][1].x += reg_a[j % 2][0].x * reg_b[j % 2][1].x;
			c[0][1].y += reg_a[j % 2][0].x * reg_b[j % 2][1].y;
			c[0][1].z += reg_a[j % 2][0].x * reg_b[j % 2][1].z;
			c[0][1].w += reg_a[j % 2][0].x * reg_b[j % 2][1].w;
			c[1][0].x += reg_a[j % 2][0].y * reg_b[j % 2][0].x;
			c[1][0].y += reg_a[j % 2][0].y * reg_b[j % 2][0].y;
			c[1][0].z += reg_a[j % 2][0].y * reg_b[j % 2][0].z;
			c[1][0].w += reg_a[j % 2][0].y * reg_b[j % 2][0].w;
			c[1][1].x += reg_a[j % 2][0].y * reg_b[j % 2][1].x;
			c[1][1].y += reg_a[j % 2][0].y * reg_b[j % 2][1].y;
			c[1][1].z += reg_a[j % 2][0].y * reg_b[j % 2][1].z;
			c[1][1].w += reg_a[j % 2][0].y * reg_b[j % 2][1].w;
			c[2][0].x += reg_a[j % 2][0].z * reg_b[j % 2][0].x;
			c[2][0].y += reg_a[j % 2][0].z * reg_b[j % 2][0].y;
			c[2][0].z += reg_a[j % 2][0].z * reg_b[j % 2][0].z;
			c[2][0].w += reg_a[j % 2][0].z * reg_b[j % 2][0].w;
			c[2][1].x += reg_a[j % 2][0].z * reg_b[j % 2][1].x;
			c[2][1].y += reg_a[j % 2][0].z * reg_b[j % 2][1].y;
			c[2][1].z += reg_a[j % 2][0].z * reg_b[j % 2][1].z;
			c[2][1].w += reg_a[j % 2][0].z * reg_b[j % 2][1].w;
			c[3][0].x += reg_a[j % 2][0].w * reg_b[j % 2][0].x;
			c[3][0].y += reg_a[j % 2][0].w * reg_b[j % 2][0].y;
			c[3][0].z += reg_a[j % 2][0].w * reg_b[j % 2][0].z;
			c[3][0].w += reg_a[j % 2][0].w * reg_b[j % 2][0].w;
			c[3][1].x += reg_a[j % 2][0].w * reg_b[j % 2][1].x;
			c[3][1].y += reg_a[j % 2][0].w * reg_b[j % 2][1].y;
			c[3][1].z += reg_a[j % 2][0].w * reg_b[j % 2][1].z;
			c[3][1].w += reg_a[j % 2][0].w * reg_b[j % 2][1].w;
			c[4][0].x += reg_a[j % 2][1].x * reg_b[j % 2][0].x;
			c[4][0].y += reg_a[j % 2][1].x * reg_b[j % 2][0].y;
			c[4][0].z += reg_a[j % 2][1].x * reg_b[j % 2][0].z;
			c[4][0].w += reg_a[j % 2][1].x * reg_b[j % 2][0].w;
			c[4][1].x += reg_a[j % 2][1].x * reg_b[j % 2][1].x;
			c[4][1].y += reg_a[j % 2][1].x * reg_b[j % 2][1].y;
			c[4][1].z += reg_a[j % 2][1].x * reg_b[j % 2][1].z;
			c[4][1].w += reg_a[j % 2][1].x * reg_b[j % 2][1].w;
			c[5][0].x += reg_a[j % 2][1].y * reg_b[j % 2][0].x;
			c[5][0].y += reg_a[j % 2][1].y * reg_b[j % 2][0].y;
			c[5][0].z += reg_a[j % 2][1].y * reg_b[j % 2][0].z;
			c[5][0].w += reg_a[j % 2][1].y * reg_b[j % 2][0].w;
			c[5][1].x += reg_a[j % 2][1].y * reg_b[j % 2][1].x;
			c[5][1].y += reg_a[j % 2][1].y * reg_b[j % 2][1].y;
			c[5][1].z += reg_a[j % 2][1].y * reg_b[j % 2][1].z;
			c[5][1].w += reg_a[j % 2][1].y * reg_b[j % 2][1].w;
			c[6][0].x += reg_a[j % 2][1].z * reg_b[j % 2][0].x;
			c[6][0].y += reg_a[j % 2][1].z * reg_b[j % 2][0].y;
			c[6][0].z += reg_a[j % 2][1].z * reg_b[j % 2][0].z;
			c[6][0].w += reg_a[j % 2][1].z * reg_b[j % 2][0].w;
			c[6][1].x += reg_a[j % 2][1].z * reg_b[j % 2][1].x;
			c[6][1].y += reg_a[j % 2][1].z * reg_b[j % 2][1].y;
			c[6][1].z += reg_a[j % 2][1].z * reg_b[j % 2][1].z;
			c[6][1].w += reg_a[j % 2][1].z * reg_b[j % 2][1].w;
			c[7][0].x += reg_a[j % 2][1].w * reg_b[j % 2][0].x;
			c[7][0].y += reg_a[j % 2][1].w * reg_b[j % 2][0].y;
			c[7][0].z += reg_a[j % 2][1].w * reg_b[j % 2][0].z;
			c[7][0].w += reg_a[j % 2][1].w * reg_b[j % 2][0].w;
			c[7][1].x += reg_a[j % 2][1].w * reg_b[j % 2][1].x;
			c[7][1].y += reg_a[j % 2][1].w * reg_b[j % 2][1].y;
			c[7][1].z += reg_a[j % 2][1].w * reg_b[j % 2][1].z;
			c[7][1].w += reg_a[j % 2][1].w * reg_b[j % 2][1].w;
		}

		if (i < K) {
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 0 * TILE_Y + 0) = ldg_a_reg[0].x;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 1 * TILE_Y + 0) = ldg_a_reg[0].y;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 2 * TILE_Y + 0) = ldg_a_reg[0].z;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 3 * TILE_Y + 0) = ldg_a_reg[0].w;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 0 * TILE_Y + 64) = ldg_a_reg[1].x;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 1 * TILE_Y + 64) = ldg_a_reg[1].y;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 2 * TILE_Y + 64) = ldg_a_reg[1].z;
			*((float*)&smem_a[write_stage_idx][0] + sts_a_offset + 3 * TILE_Y + 64) = ldg_a_reg[1].w;

			smem_b[write_stage_idx][sts_b_offset + 0] = ldg_b_reg[0];
			__syncthreads();
			write_stage_idx ^= 1;
		}

		reg_a[0][0] = smem_a[load_stage_idx ^ 1][0 + (threadIdx.x / 8)];
		reg_a[0][1] = smem_a[load_stage_idx ^ 1][16 + (threadIdx.x / 8)];
		reg_b[0][0] = smem_b[load_stage_idx ^ 1][0 + (threadIdx.x % 8)];
		reg_b[0][1] = smem_b[load_stage_idx ^ 1][8 + (threadIdx.x % 8)];


		c[0][0].x += reg_a[1][0].x * reg_b[1][0].x;
		c[0][0].y += reg_a[1][0].x * reg_b[1][0].y;
		c[0][0].z += reg_a[1][0].x * reg_b[1][0].z;
		c[0][0].w += reg_a[1][0].x * reg_b[1][0].w;
		c[0][1].x += reg_a[1][0].x * reg_b[1][1].x;
		c[0][1].y += reg_a[1][0].x * reg_b[1][1].y;
		c[0][1].z += reg_a[1][0].x * reg_b[1][1].z;
		c[0][1].w += reg_a[1][0].x * reg_b[1][1].w;
		c[1][0].x += reg_a[1][0].y * reg_b[1][0].x;
		c[1][0].y += reg_a[1][0].y * reg_b[1][0].y;
		c[1][0].z += reg_a[1][0].y * reg_b[1][0].z;
		c[1][0].w += reg_a[1][0].y * reg_b[1][0].w;
		c[1][1].x += reg_a[1][0].y * reg_b[1][1].x;
		c[1][1].y += reg_a[1][0].y * reg_b[1][1].y;
		c[1][1].z += reg_a[1][0].y * reg_b[1][1].z;
		c[1][1].w += reg_a[1][0].y * reg_b[1][1].w;
		c[2][0].x += reg_a[1][0].z * reg_b[1][0].x;
		c[2][0].y += reg_a[1][0].z * reg_b[1][0].y;
		c[2][0].z += reg_a[1][0].z * reg_b[1][0].z;
		c[2][0].w += reg_a[1][0].z * reg_b[1][0].w;
		c[2][1].x += reg_a[1][0].z * reg_b[1][1].x;
		c[2][1].y += reg_a[1][0].z * reg_b[1][1].y;
		c[2][1].z += reg_a[1][0].z * reg_b[1][1].z;
		c[2][1].w += reg_a[1][0].z * reg_b[1][1].w;
		c[3][0].x += reg_a[1][0].w * reg_b[1][0].x;
		c[3][0].y += reg_a[1][0].w * reg_b[1][0].y;
		c[3][0].z += reg_a[1][0].w * reg_b[1][0].z;
		c[3][0].w += reg_a[1][0].w * reg_b[1][0].w;
		c[3][1].x += reg_a[1][0].w * reg_b[1][1].x;
		c[3][1].y += reg_a[1][0].w * reg_b[1][1].y;
		c[3][1].z += reg_a[1][0].w * reg_b[1][1].z;
		c[3][1].w += reg_a[1][0].w * reg_b[1][1].w;
		c[4][0].x += reg_a[1][1].x * reg_b[1][0].x;
		c[4][0].y += reg_a[1][1].x * reg_b[1][0].y;
		c[4][0].z += reg_a[1][1].x * reg_b[1][0].z;
		c[4][0].w += reg_a[1][1].x * reg_b[1][0].w;
		c[4][1].x += reg_a[1][1].x * reg_b[1][1].x;
		c[4][1].y += reg_a[1][1].x * reg_b[1][1].y;
		c[4][1].z += reg_a[1][1].x * reg_b[1][1].z;
		c[4][1].w += reg_a[1][1].x * reg_b[1][1].w;
		c[5][0].x += reg_a[1][1].y * reg_b[1][0].x;
		c[5][0].y += reg_a[1][1].y * reg_b[1][0].y;
		c[5][0].z += reg_a[1][1].y * reg_b[1][0].z;
		c[5][0].w += reg_a[1][1].y * reg_b[1][0].w;
		c[5][1].x += reg_a[1][1].y * reg_b[1][1].x;
		c[5][1].y += reg_a[1][1].y * reg_b[1][1].y;
		c[5][1].z += reg_a[1][1].y * reg_b[1][1].z;
		c[5][1].w += reg_a[1][1].y * reg_b[1][1].w;
		c[6][0].x += reg_a[1][1].z * reg_b[1][0].x;
		c[6][0].y += reg_a[1][1].z * reg_b[1][0].y;
		c[6][0].z += reg_a[1][1].z * reg_b[1][0].z;
		c[6][0].w += reg_a[1][1].z * reg_b[1][0].w;
		c[6][1].x += reg_a[1][1].z * reg_b[1][1].x;
		c[6][1].y += reg_a[1][1].z * reg_b[1][1].y;
		c[6][1].z += reg_a[1][1].z * reg_b[1][1].z;
		c[6][1].w += reg_a[1][1].z * reg_b[1][1].w;
		c[7][0].x += reg_a[1][1].w * reg_b[1][0].x;
		c[7][0].y += reg_a[1][1].w * reg_b[1][0].y;
		c[7][0].z += reg_a[1][1].w * reg_b[1][0].z;
		c[7][0].w += reg_a[1][1].w * reg_b[1][0].w;
		c[7][1].x += reg_a[1][1].w * reg_b[1][1].x;
		c[7][1].y += reg_a[1][1].w * reg_b[1][1].y;
		c[7][1].z += reg_a[1][1].w * reg_b[1][1].z;
		c[7][1].w += reg_a[1][1].w * reg_b[1][1].w;

	} while (i < K);

#pragma unroll
	for (int wm = 0; wm < 4; wm++) {
#pragma unroll
		for (int wn = 0; wn < WPTN_4; wn++) {
			if (((blockIdx.y * TILE_Y + (threadIdx.x / 8) * 4 + wm) < M)
				&& ((blockIdx.x * TILE_X + wn * 32 + (threadIdx.x % 8) * 4) < N)) {
				*(pC + ((threadIdx.x / 8) * 4 + wm) * N / 4 + wn * 8 + (threadIdx.x % 8)) = c[wm][wn];
			}
		}
	}

#pragma unroll
	for (int wm = 0; wm < 4; wm++) {
#pragma unroll
		for (int wn = 0; wn < WPTN_4; wn++) {
			if (((blockIdx.y * TILE_Y + 64 + (threadIdx.x / 8) * 4 + wm) < M)
				&& ((blockIdx.x * TILE_X + wn * 32 + (threadIdx.x % 8) * 4) < N)) {
				*(pC + (64 + (threadIdx.x / 8) * 4 + wm) * N / 4 + wn * 8 + (threadIdx.x % 8)) = c[wm + 4][wn];
			}
		}
	}
}




float* random_matrix(int row, int col) {
	float* mat = new float[row * col];


	for (int i = 0; i < row; ++i) {
		for (int j = 0; j < col; ++j) {
			if (i * col + j + 1 < 100) {
				mat[i * col + j] = i * col + j + 1;
			}
			else {
				mat[i * col + j] = 10;
			}
		}
	}

	return mat;
}


void print_mat(float* mat, int row, int col) {
	/*Display the matrix for visualizatoin*/
	for (int i = 0; i < row; ++i) {
		for (int j = 0; j < col; ++j) {
			cout << mat[i * col + j] << " ";
		}cout << endl;
	}
	cout << "\n" << endl;
}


float* random_matrix_1(int row, int col) {
	float* mat = new float[row * col];


	for (int i = 0; i < row; ++i) {
		for (int j = 0; j < col; ++j) {
			mat[i * col + j] = i;
		}
	}

	return mat;
}



int main()
{
	const int m = 3072, k = 3072, n = 64;
	float* a = random_matrix(k, m);
	float* b = random_matrix(k, n);
	float* c = new float[m * n];

	float* dev_a, *dev_b, *dev_c;

	cudaMalloc((void**)&dev_a, m * k * sizeof(float));
	cudaMalloc((void**)&dev_b, k * n * sizeof(float));
	cudaMalloc((void**)&dev_c, m * n * sizeof(float));

	cudaMemcpy(dev_a, a, m * k * sizeof(float), cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, b, k * n * sizeof(float), cudaMemcpyHostToDevice);


	constexpr int BLOCK = 128;
	dim3 grid((n + 64 - 1) / 64, (m + BLOCK - 1) / BLOCK);
	int repeat = 1;






	cudaEvent_t start, stop;
	cudaEventCreate(&start);
	cudaEventCreate(&stop);
	cudaEventRecord(start);
	cudaEventQuery(start);

	for (int i = 0; i < repeat; i++) {
		sgemm_128x128x8 << <grid, 128 >> > (m, n, k, dev_a, dev_b, dev_c);
	}





	cudaEventRecord(stop);
	cudaEventSynchronize(stop);
	float elapsed_time;
	cudaEventElapsedTime(&elapsed_time, start, stop);
	printf("Time = %g ms .\n", elapsed_time / repeat);
	cudaEventDestroy(start);
	cudaEventDestroy(stop);


	cudaMemcpy(c, dev_c, m*n * sizeof(float), cudaMemcpyDeviceToHost);
	//bool chk = check(a, b, c, m, n, k);
	//printf("Matrix_C check: %s\n", chk ? "OK" : "Failed");
	//cout << 'a' << endl;
	//print_mat(a, m, k);
	//cout << 'b' << endl;
	//print_mat(b, k, n);
	//cout << 'c' << endl;
	//print_mat(c, m, n);
}
